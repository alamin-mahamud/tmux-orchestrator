team:
  name: "simple-web-app-team"
  project_type: "web_application"
  complexity: "beginner"
  estimated_duration: "3 weeks"
  
  composition:
    - role: "project_manager"
      name: "TaskApp-PM"
      personality: "balanced"
      communication_style: "supportive"
      responsibilities:
        - "Quality assurance and testing coordination"
        - "Feature specification and acceptance criteria"
        - "Team coordination and progress tracking"
        - "Risk identification and mitigation"
        - "Stakeholder communication"
      check_interval_minutes: 30
      
    - role: "full_stack_developer"
      name: "TaskApp-Dev"
      seniority: "senior"
      specialization: ["react", "node.js", "postgresql"]
      responsibilities:
        - "Frontend development with React/TypeScript"
        - "Backend API development with Express.js"
        - "Database design and optimization"
        - "Authentication and security implementation"
        - "Testing and code quality"
      practices:
        - "TDD"
        - "code_review"
        - "continuous_integration"
        - "documentation"
      check_interval_minutes: 30
      
    - role: "qa_engineer"
      name: "TaskApp-QA"
      specialization: "automation"
      focus_areas:
        - "Frontend testing (unit, integration, e2e)"
        - "API testing and validation"
        - "User experience testing"
        - "Performance testing"
        - "Security testing"
      tools:
        - "jest"
        - "react-testing-library"
        - "cypress"
        - "postman"
        - "lighthouse"
      check_interval_minutes: 45

workflow:
  methodology: "agile"
  sprint_length_days: 7
  daily_standups: true
  sprint_reviews: true
  retrospectives: true
  
  communication_patterns:
    # Hub-and-spoke with PM as central coordinator
    pm_to_dev: "direct"
    pm_to_qa: "direct" 
    dev_to_qa: "through_pm"  # For formal handoffs
    dev_to_qa_direct: "technical_discussions"  # For technical clarifications
    
  quality_gates:
    code_review: "required"
    testing: "comprehensive"
    documentation: "essential"
    performance_check: "required"
    security_scan: "required"

technology_stack:
  frontend:
    framework: "react"
    language: "typescript"
    styling: "tailwindcss"
    state_management: "react-query"
    testing: "jest + react-testing-library"
    
  backend:
    runtime: "node.js"
    framework: "express"
    language: "typescript"
    database: "postgresql"
    orm: "prisma"
    authentication: "jwt"
    testing: "jest + supertest"
    
  development:
    bundler: "vite"
    linting: "eslint + prettier"
    git_hooks: "husky"
    ci_cd: "github_actions"
    
  deployment:
    frontend: "vercel"
    backend: "heroku"
    database: "heroku-postgres"
    monitoring: "sentry + heroku-metrics"

project_phases:
  phase_1:
    name: "Foundation"
    duration_days: 7
    goals:
      - "Project setup and development environment"
      - "Database schema and basic authentication"
      - "Core CRUD operations for tasks"
      - "Basic frontend structure"
    deliverables:
      - "Working authentication system"
      - "Task creation and listing functionality"
      - "API endpoints documented"
      - "Basic test coverage >70%"
      
  phase_2:
    name: "Enhanced Features"
    duration_days: 7
    goals:
      - "Complete responsive UI implementation"
      - "Advanced task management features"
      - "User experience enhancements"
      - "Comprehensive testing"
    deliverables:
      - "Fully responsive design"
      - "Task filtering and categorization"
      - "Theme switching functionality"
      - "Test coverage >85%"
      
  phase_3:
    name: "Polish & Deploy"
    duration_days: 7
    goals:
      - "Performance optimization"
      - "Security hardening"
      - "Production deployment"
      - "Documentation completion"
    deliverables:
      - "Production-ready application"
      - "Complete documentation"
      - "Monitoring and alerting setup"
      - "User acceptance testing completed"

success_metrics:
  technical:
    test_coverage: ">85%"
    performance:
      page_load: "<2s"
      api_response: "<200ms"
      lighthouse_score: ">90"
    security:
      vulnerabilities: "0 critical, 0 high"
      authentication: "secure JWT implementation"
      data_encryption: "all sensitive data encrypted"
      
  quality:
    bug_density: "<0.1 per feature"
    code_review_approval: ">95%"
    user_story_completion: "100%"
    documentation_coverage: "complete"
    
  user_experience:
    usability_score: ">4.5/5"
    mobile_compatibility: "100%"
    accessibility_compliance: "WCAG 2.1 AA"
    error_rate: "<1%"

team_communication:
  templates:
    daily_standup: |
      DAILY STANDUP [{{date}}]
      Agent: {{agent_name}}
      
      âœ… Yesterday:
      {{completed_work}}
      
      ðŸ”„ Today:
      {{planned_work}}
      
      ðŸš« Blockers:
      {{blockers}}
      
    progress_update: |
      PROGRESS UPDATE [{{timestamp}}]
      Phase: {{current_phase}}
      Sprint Day: {{sprint_day}}/7
      
      ðŸ“ˆ Completed:
      {{completed_tasks}}
      
      ðŸŽ¯ In Progress:
      {{current_tasks}}
      
      ðŸ“Š Metrics:
      - Test Coverage: {{test_coverage}}%
      - Features Complete: {{features_complete}}/{{total_features}}
      - Quality Score: {{quality_score}}/10
      
    task_handoff: |
      TASK HANDOFF [{{task_id}}]
      From: {{from_agent}} â†’ To: {{to_agent}}
      
      Task: {{task_title}}
      Status: {{task_status}}
      
      âœ… Acceptance Criteria:
      {{acceptance_criteria}}
      
      ðŸ“‹ Testing Notes:
      {{testing_notes}}
      
      ðŸ”— Related Files:
      {{file_list}}

automation:
  git_hooks:
    pre_commit:
      - "lint_check"
      - "type_check" 
      - "unit_tests"
    pre_push:
      - "integration_tests"
      - "security_scan"
      
  ci_cd_pipeline:
    on_pull_request:
      - "run_full_test_suite"
      - "build_verification"
      - "performance_check"
      - "security_scan"
    on_merge_to_main:
      - "deploy_to_staging"
      - "run_e2e_tests"
      - "performance_audit"
    on_release_tag:
      - "deploy_to_production"
      - "notify_stakeholders"
      
  scheduled_tasks:
    daily:
      - "dependency_security_check"
      - "performance_monitoring_report"
    weekly:
      - "code_quality_report"
      - "test_coverage_analysis"

risk_management:
  identified_risks:
    - risk: "Authentication security vulnerabilities"
      mitigation: "Regular security audits, JWT best practices"
      owner: "full_stack_developer"
      
    - risk: "Database performance with large datasets"
      mitigation: "Query optimization, indexing strategy"
      owner: "full_stack_developer"
      
    - risk: "Mobile responsiveness issues"
      mitigation: "Mobile-first design, comprehensive device testing"
      owner: "qa_engineer"
      
    - risk: "Third-party dependency vulnerabilities"
      mitigation: "Automated security scanning, minimal dependencies"
      owner: "project_manager"

learning_objectives:
  for_pm:
    - "Practice coordinating small, focused team"
    - "Learn to balance speed with quality"
    - "Develop effective communication patterns"
    
  for_developer:
    - "Implement full-stack TypeScript application"
    - "Practice TDD and comprehensive testing"
    - "Learn modern React patterns and best practices"
    
  for_qa:
    - "Develop automated testing strategy"
    - "Practice user experience testing"
    - "Learn modern web testing tools"